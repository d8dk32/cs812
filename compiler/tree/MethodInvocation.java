package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;
import java.util.List;

/**
 * AST field access node.
 *
 */
public final class MethodInvocation extends Expression
{
    private Expression primary;
    private boolean isSuper;
    private String methodName;
    private List<Expression> args;
    private ClassType classType = null;

    public MethodInvocation(final Location loc, boolean isSuper, Expression primary, Identifier methodName, List<Expression> args)
    {
        super(loc);
        this.primary = primary;
        this.isSuper = isSuper;
        this.methodName = methodName.getName();
        this.args = args;
    }

    public Expression getPrimary()
    {
        return this.primary;
    }

    public String getMethodName()
    {
        return this.methodName;
    }

    public boolean isSuper()
    {
        return this.isSuper;
    }

    public List<Expression> getArgs()
    {
        return this.args;
    }

    public ClassType getClassType()
    {
        return this.classType;
    }

    public void setClassType(ClassType ct)
    {
        this.classType = ct;
    }

    /** Apply a visitor to the node.
    *
    *  @param visitor the visitor to apply.
    *
    *  @return the value generated by the visitor.
    */
    @Override public <T> T apply(TreeVisitor<T> visitor)
    {
        return visitor.visit(this);
    }
}