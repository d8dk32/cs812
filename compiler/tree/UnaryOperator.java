
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import static tc.compiler.tree.Unop.*;

/**
 * AST unary operator node.
 *
 */
public final class UnaryOperator extends Expression
{
  // the operator itself
  private Unop op;

  // the subtree for the single operand
  private Expression left;

  /** Construct a unary operator node.
   *
   *  @param loc   source code location of operator.
   *  @param op    specific unary operator being constructed.
   *  @param left  the left subtree of the operator.
   */
  public UnaryOperator(final Location loc, final Unop op,
     final Expression left)
  {
    super(loc);
    this.op = op;
    this.left = left;
  }

  /** Retrieve the specific unary operator represented by the node.
   *
   *  @return the specific unary operator represented by the node.
   */
  public Unop getOp()
  {
    return op;
  }

  /** Re-set the specific unary operator represented by the node.
   *
   *  @param op the new specific unary operator.
   */
  public void setOp(final Unop op)
  {
    this.op = op;
  }

  /** Convert operator kind to (Java) String for displaying.
   *
   *  @return Java string for the name of this operator
   */
  public String getOpString()
  {
    return op.toString();
  }

  /** Get the left subtree of the node.
   *
   *  @return the left subtree of the node.
   */
  public Expression getLeft()
  {
    return left;
  }

  /** Set the left subtree of the node.
   *
   *  @param left the new left subtree of the node.
   */
  public void setLeft(Expression left)
  {
    this.left = left;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}
