
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;
import tc.compiler.tree.Block;
import java.util.List;
import java.util.ArrayList;

/**
 * Superclass for all AST statement nodes.
 *
 */
public class MethodDeclaration extends ClassBodyDeclaration
{

  private String type;
  private int typeDims;
  private Type returnType;
  private List<NameTypeDepth> params;
  private Block body;
  private String name;
  private Method declaredMethod;

  
  public MethodDeclaration(final Location loc, String type, int typeDims, String name, List<NameTypeDepth> params, Block body)
  {
    super(loc);
    this.type = type;
    this.typeDims = typeDims;
    this.name = name;
    this.params = params;
    this.body = body;
    returnType = Type.createType(type, typeDims);
    declaredMethod = new Method(type, typeDims, name, params);
  }

  /** get type of declarations
 * @return string representing the type
  */
  public String getType() 
  {
      return this.type;
  }

  public Type getReturnType()
  {
    return this.returnType;
  }

  /** gets list of declared entitites
  * @return List
    */
  public List<NameTypeDepth> getParams() 
  {
      return this.params;
  }

  public Method getMethod()
  {
    return this.declaredMethod;
  }

  public Block getBody()
  {
    return this.body;
  }

  /** Apply a visitor to the node.
  *
  *  @param visitor the visitor to apply.
  *
  *  @return the value generated by the visitor.
  */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
      return visitor.visit(this);
  }
}

