
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;

/**
 * AST output statement node.
 *
 */
public final class OutputStatement extends Statement
{
  // expression whose value is to be output
  private Expression exp;

  /** Construct an output statement.
   *
   *  @param loc the source code location of the statement.
   *  @param exp the expression subtree.
   */
  public OutputStatement(final Location loc, final Expression exp)
  {
    super(loc);
    this.exp = exp;
  }

  /** Get the expression subtree of the node.
   *
   *  @return the expression subtree.
   */
  public Expression getExp()
  {
    return exp;
  }

  /** Set the expression subtree of the node.
   *
   *  @param exp new expression subtree
   */
  public void setExp(Expression exp)
  {
    this.exp = exp;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

