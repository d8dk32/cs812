
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.Statement;

/**
 * AST if/else statement node.
 *
 */
public final class IfElseStatement extends Statement
{

  private Expression condition;
  private Statement thenStatement;
  private Statement elseStatement;

  /** Construct an If/Else statement.
   *
   *  @param loc the source code location of the statement.
   *  @param condition the condition on which the if/else hinges
   *  @param thenStatement the statement executed if the condition is true
   *  @param elseStatement the statement executed if the condition is false
   */
  public IfElseStatement(final Location loc, Expression condition, Statement thenStatement, Statement elseStatement)
  {
    super(loc);
    this.condition = condition;
    this.thenStatement = thenStatement;
    this.elseStatement = elseStatement;
  }

  /** get the condition on which the if/else hinges 
  * @return Expression representing the condition 
  */
  public Expression getCondition()
  {
    return this.condition;
  }

  /** set the condition for this if/else
  * @param condition the expression representing the new condition
  */
  public void setCondition(Expression condition)
  {
    this.condition = condition;
  }

  /** get the THEN statement 
  * @return Statement executed when condition is true
  */
  public Statement getThen()
  {
    return this.thenStatement;
  }

  /** set the THEN statement 
  * @param thenStatement executed when condition is true
  */
  public void setThen(Statement thenStatement)
  {
    this.thenStatement = thenStatement;
  }

  /** get the ELSE statement 
  * @return Statement executed when condition is false
  */
  public Statement getElse()
  {
    return this.elseStatement;
  }

  /** set the ELSE statement 
  * @param elseStatement executed when condition is false
  */
  public void setElse(Statement elseStatement)
  {
    this.elseStatement = elseStatement;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

