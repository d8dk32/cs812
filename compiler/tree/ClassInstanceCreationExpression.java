
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.type.Type;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;
import tc.compiler.tree.Expression;
import java.util.List;
/**
 * Superclass for all AST expression nodes.
 *
 */
public class ClassInstanceCreationExpression extends Expression
{

  private String className;
  private List<Expression> args; 
  private ConstructorDeclaration constructor;


  /** Construct an array creation expression node. 
   *
   *  @param loc source code location of the node.
   *  @param className the name of the class being instantiated
   *  @param args a list of expressions to be input as arguments to the constructor
   */
  public ClassInstanceCreationExpression(final Location loc, String className, List<Expression> args)
  {
    super(loc);
    this.className = className;
    this.args = args;
  }

  /** Get the class name being instantiated
   *
   *  @return the class name
   */
  public String getClassName()
  {
    return this.className;
  }

  /** Get the arguments to the constructor.
   *
   *  @return the list of args.
   */
  public List<Expression> getArgs()
  {
    return this.args;
  }

  public void setArgs(List<Expression> newArgs)
  {
    this.args = newArgs;
  }

  //get and set constructor associated with this class isntance creation expr
  public ConstructorDeclaration getMatch()
  {
    return this.constructor;
  }

  public void setMatch(ConstructorDeclaration cd)
  {
    this.constructor = cd;
  }

   /** Apply a visitor to the node.
    *
    *  @param visitor the visitor to apply.
    *
    *  @return the value generated by the visitor.
    */
    @Override public <T> T apply(TreeVisitor<T> visitor)
    {
        return visitor.visit(this);
    }

}

