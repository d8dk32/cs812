
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.Statement;

/**
 * AST if/else statement node.
 *
 */
public final class WhileStatement extends Statement
{

  private Expression condition;
  private Statement statement;

  /** Construct a While statement.
   *
   *  @param loc the source code location of the statement.
   *  @param condition the condition on which the While hinges
   *  @param statement the statement executed while the condition is true
   */
  public WhileStatement(final Location loc, Expression condition, Statement statement)
  {
    super(loc);
    this.condition = condition;
    this.statement = statement;
  }

  /** get the condition on which the while hinges 
  * @return Expression representing the condition 
  */
  public Expression getCondition()
  {
    return this.condition;
  }

  /** set the condition for this while
  * @param condition the expression representing the new condition
  */
  public void setCondition(Expression condition)
  {
    this.condition = condition;
  }

  /** get the statement 
  * @return Statement executed while condition is true
  */
  public Statement getStatement()
  {
    return this.statement;
  }

  /** set the statement 
  * @param statement new statement to be executed while condition is true
  */
  public void setStatement(Statement statement)
  {
    this.statement = statement;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

