package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;

/**
 * AST field access node.
 *
 */
public final class FieldAccess extends Expression implements LeftSide
{
    private Expression obj;
    private Identifier field;
    private boolean isLeftSide;

    public FieldAccess(Location loc, Expression obj, Identifier field)
    {
        super(loc);
        this.obj = obj;
        this.field = field;
        this.isLeftSide = false;
    }

    public Expression getObj()
    {
        return this.obj;
    }

    public Identifier getField()
    {
        return this.field;
    }

    @Override public boolean isLeftSide()
    {
        return this.isLeftSide;
    }

    @Override public void setLeftSide(boolean isLs)
    {
        this.isLeftSide = isLs;
    }
    @Override public Type getType()
    {
        return super.getType();
    }

    /** Apply a visitor to the node.
    *
    *  @param visitor the visitor to apply.
    *
    *  @return the value generated by the visitor.
    */
    @Override public <T> T apply(TreeVisitor<T> visitor)
    {
        return visitor.visit(this);
    }
}