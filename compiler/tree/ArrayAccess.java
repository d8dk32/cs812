package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;
import tc.compiler.tree.LeftSide;

/**
 * AST ArrayAcess node.
 *
 */
public final class ArrayAccess extends Expression implements LeftSide
{

    private boolean isLeftSide;
    private Expression theArray;
    private Expression dimExpr;
    private ArrayType baseType;
    private int layer; //how deep the nesting of this array access is

    // may be set to true in TreeBuilder
    // used to detect that -2147483648 is not an error
    private boolean parentIsUnaryMinus = false;
    

     /**
     * Create variable node
     *
     * @param loc source code lcoation
     * @param arr the array being accessed
     * @param dimExpr the dimension expression
     */

     public ArrayAccess(final Location loc, final Expression arr, final Expression dimExpr) {
         super(loc);
         this.theArray = arr;
         this.dimExpr = dimExpr;
         this.isLeftSide = false;
     }

    /** Is the parent a unary minus?
    *
    *  @return true if so, and false otherwise
    */
    public boolean isParentUnaryMinus()
    {
        return parentIsUnaryMinus;
    }

    /** Remember that the parent is a unary minus.
    */
    public void setParentIsUnaryMinus()
    {
        this.parentIsUnaryMinus = true;
    }

    /**
     * gets the array being accessed
     * @return the expression pointing to the array being accessed
     */
    public Expression getTheArray()
    {
        return this.theArray;
    }

    /**
    * get the expression representing the array address being accessed (the expression inside the brackets)
    * @return the dimension expression representing the array address ebing accessed
     */
    public Expression getDimExpr()
    {
        return this.dimExpr;
    }

    //get and set the base expression 
    public void setBaseType(ArrayType at)
    {
        this.baseType = at;
    }

    public ArrayType getBaseType()
    {
        return this.baseType;
    }

    //get and set this arrayaccess's layer
    public int getLayer()
    {
        return this.layer;
    }
    public void setLayer(int l)
    {
        this.layer = l;
    }
    
    /** Apply a visitor to the node.
    *
    *  @param visitor the visitor to apply.
    *
    *  @return the value generated by the visitor.
    */
    @Override public <T> T apply(TreeVisitor<T> visitor)
    {
        return visitor.visit(this);
    }

    /** isLeftSide
     *  @return true if this expression is the left side of an assignment
     */
     @Override public boolean isLeftSide() 
     {
         return this.isLeftSide;
     }

    /** set Left-sided-ness
     *  @param isLs true if this is the left side of an assignment
     */
     public void setLeftSide(boolean isLs)
     {
         this.isLeftSide = isLs;
     }

    @Override public Type getType()
    {
        return super.getType();
    }
}