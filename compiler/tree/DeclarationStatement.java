package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;
import tc.compiler.tree.Identifier;
import java.util.List;
import java.util.ArrayList;

/**
 * AST declaration statement node.
 *
 */
public final class DeclarationStatement extends Statement
{
    private String type;
    private List<Identifier> declarations;
    private List<Integer> dimList;
    private int addDims;

    /** Create a statement tree node
     * @param loc location in source code
     * @param type type of declarations
     * @param addDims the number of additional dimensions tacked on (i.e int[][] will have addDims = 2)
     * @param decls list of entities being declared
     * @param dimList list of dimensions associated with array type vars
     */
     public DeclarationStatement(final Location loc, final String type, int addDims, final List<Identifier> decls, final List<Integer> dimList)
     {
         super(loc);
         this.type = type;
         this.declarations = decls;
         this.dimList = new ArrayList<Integer>();
         this.addDims = addDims;
         
         //build the dimension list with the correct array depths
         for(int i = 0; i < dimList.size(); i++)
         {
            this.dimList.add(new Integer(dimList.get(i).intValue() + addDims));
         }
     }

     /** get type of declarations
     * @return Type
      */
    public String getType() 
    {
        return this.type;
    }

    /** gets list of declared entitites
    * @return List
     */
    public List<Identifier> getDeclarations() 
    {
        return this.declarations;
    }

    /** gets list of dimensions declared
    * @return List
     */
    public List<Integer> getDimensionList() 
    {
        return this.dimList;
    }

    /** Apply a visitor to the node.
    *
    *  @param visitor the visitor to apply.
    *
    *  @return the value generated by the visitor.
    */
    @Override public <T> T apply(TreeVisitor<T> visitor)
    {
        return visitor.visit(this);
    }
}