
package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;

import java.util.List;

/**
 * Node for the root of the AST.
 *
 */
public final class CompilationUnit extends Node
{
  // the list of statements for the main block
  private List<Statement> mainBlock;

  // the list of class declarations
  private List<ClassDeclaration> classes;

  /** Construct a CompilationUnit AST node (the root of the AST).
   *
   *  @param loc the source code location of the start of the program.
   *  @param mainBlock list of statements for the main block.
   *  @param classes list of class declarations in the program.
   */
  public CompilationUnit(final Location loc, final List<Statement> mainBlock,
    final List<ClassDeclaration> classes)
  {
    super(loc);
    this.mainBlock = mainBlock;
    this.classes = classes;
  }

  /** Get the main block
   *
   *  @return the statement list for the main block.
   */
  public List<Statement> getMainBlock()
  {
    return mainBlock;
  }

  /** Get the list of class declarations in the program.
   *
   *  @return the list of class declarations in the program.
   */
  public List<ClassDeclaration> getClasses()
  {
    return classes;
  }

  /** Apply a visitor to the node.
   *
   *  @param visitor the visitor to apply.
   *
   *  @return the value generated by the visitor.
   */
  @Override public <T> T apply(TreeVisitor<T> visitor)
  {
    return visitor.visit(this);
  }
}

