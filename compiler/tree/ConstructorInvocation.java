package tc.compiler.tree;

import tc.compiler.Location;
import tc.compiler.tree.visit.TreeVisitor;
import tc.compiler.tree.type.*;
import java.util.List;

/**
 * AST field access node.
 *
 */
public final class ConstructorInvocation extends Statement
{
    private boolean isSuper;
    private List<Expression> args;
    private ClassType classType = null;
    private ConstructorDeclaration match = null;

    public ConstructorInvocation(final Location loc, boolean isSuper, List<Expression> args)
    {
        super(loc);
        this.isSuper = isSuper;
        this.args = args;
    }

    public boolean isSuper()
    {
        return this.isSuper;
    }

    public List<Expression> getArgs()
    {
        return this.args;
    }

    public void setArgs(List<Expression> newArgs)
    {
        this.args = newArgs;
    }

    public ClassType getClassType()
    {
        return this.classType;
    }

    public void setClassType(ClassType ct)
    {
        this.classType = ct;
    }

    public void setMatch(ConstructorDeclaration cd)
    {
        this.match = cd;
    }

    public ConstructorDeclaration getMatch()
    {
        return this.match;
    }

    /** Apply a visitor to the node.
    *
    *  @param visitor the visitor to apply.
    *
    *  @return the value generated by the visitor.
    */
    @Override public <T> T apply(TreeVisitor<T> visitor)
    {
        return visitor.visit(this);
    }
}