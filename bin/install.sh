#!/bin/bash

#
# install the T compiler
#   1. create directories to store the files generated by the install
#   2. download the ANTLR jar file (if necessary)
#   3. generate the scripts for compiling and running T programs
#   4. build the system
#
# this script needs to be run from the directory where it is stored,
# which is tc/bin
#
# you only need to run this script once
#
# use build.sh to re-build a system that is already installed
#

# create the directories to store the results of the build
#   deletes the old build directory first

cd ..
rm -rf build
mkdir build
cd build
mkdir bin lib packages

# download the ANTLR jar file unless it already exists
# in /usr/local/lib

cd lib
if [ -e /usr/local/lib/antlr-4.7.1-complete.jar ]
then
  ln -s /usr/local/lib/antlr-4.7.1-complete.jar antlr.jar
else
  curl --silent --show-error -L http://www.antlr.org/download/antlr-4.7.1-complete.jar >antlr.jar
fi
cd ..

# create tc script
cd ..
cat scripts/tc.start >build/bin/tc
echo TC_ROOT=\"`pwd`\" >>build/bin/tc
cat scripts/tc.end >>build/bin/tc
chmod u+x build/bin/tc

# create tcdb script
cat scripts/tcdb.start >build/bin/tcdb
echo TC_ROOT=\"`pwd`\" >>build/bin/tcdb
cat scripts/tcdb.end >>build/bin/tcdb
chmod u+x build/bin/tcdb

# create grun script
cat scripts/grun.start >build/bin/grun
echo TC_ROOT=\"`pwd`\" >>build/bin/grun
cat scripts/grun.end >>build/bin/grun
chmod u+x build/bin/grun

# clean out any old ANTLR-generated files
pushd compiler/parse >&/dev/null
make -silent clean
popd >&/dev/null

# clean up any *.o files in the runtime
pushd runtime >&/dev/null
make -silent clean
popd >&/dev/null

# build the system
cd bin
bash build.sh


