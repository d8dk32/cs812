These files are the foundation for the T compiler for the Fall 2018
CS712/CS812.

The T compiler translates T source code to LLVM assembly language,
which is then converted to Intel 64 assembly language by the standard
LLVM tools (llvm-as and llc). The Intel 64 assembly is assembled and
linked with the T runtime system, which is written in C.

The necessary LLVM tools (llvm-as and llc) must be available via your PATH.

The T compiler is written in Java and uses the ANTLR parser generator.

The necessary ANTLR jar file will be installed automatically by the
installation script described below.

The T compiler is invoked by using the "tc" script.

This foundation only supports the following T features:
  integer expressions:
    addition and negation operators
    integer literals
    parenthesized expressions
  out statements
  main block

The system's files are organized into these directories:

bin - contains bash scripts for building the system.

compiler - contains the source code for the compiler.

  compiler - contains the Main class for the compiler.
  compiler/parse - parser
  compiler/tree - abstract syntax tree (AST)
  compiler/tree/type - compile-time types
  compiler/tree/visit - AST traversals (use the visitor pattern)

runtime - contains the source code for the runtime system.

scripts - contains templates for the scripts used to run the compiler.

tests - contains test programs for the system.

To build and run the system:

  1. Copy the tar file containing the system to your account:

     cp -r ~cs712/public/tc.tar .

  2. Un-tar the files:

     tar xvf tc.tar

  3. Install and build the system:

     cd tc/bin
     bash install.sh

     This will create a directory, tc/build, to contain the files
     generated by the build.

     Once an install is done, you can re-build the system by cd-ing
     to tc/bin and then:

     bash build.sh

  4. While in tc/bin, test the build by running the regression
     test suite:

     bash regression.sh

     If all is well, nothing should be printed.

     The regression suite relies on prior results, and expects an exact
     textual match, even on the error messages issued, including
     the order that they appear. This may not always be dependable, if
     changes in the internals of your compiler modify the order that error
     messages are displayed. In other words, the regression script will not
     declare false positives, but there may be false negatives.

  5. You run the compiler by executing tc/build/bin/tc. You
     can make a bash alias for this script, add its directory to your
     bash PATH, or even copy the script to where you want to use it.

     To compile a UNH T program to produce an executable file:

       tc file.t

     You must use the "t" file extension for T programs.

     By default, the script will produce an executable file whose name
     is "a.out".

     The tc script also takes a few optional commandline options:

       -AST: dumps the AST to an HTML file (file.t --> file.html) after
             semantic analysis, if semantic analysis is run; otherwise
             it dumps the tree after the parser is done.

       -CT: dumps the class table after semantic analysis.

       -noAnalyze: disable semantic analysis and code generation

       -log: display the internal translator log messages

       -noLLVM: disable processing the LLVM assembly language

       -ll: keep the LLVM assembly language file produced by the compiler

       -bc: keep the LLVM bytecode file produced by assembling the LLVM
            assembly language file

       -s: keep the Intel assembly language file

       -o outFile: name the executable file

     When the compiler is run, the compiler's intermediate files are
     written in the current directory, and by default they are deleted.
     The T source file should be in the current directory and must be
     specified by a "simple" filename, and not a full path.

To run the compiler with jdb, use tc/build/bin/tcdb. You can make a bash
alias for this script, add its directory to your bash PATH, or even copy
the script to where you want to use it. Note that tcdb only runs the
compiler, so it will only accept the commandline arguments accepted by
the compiler: -AST, -ST, -noAnalyze and -log.

To debug the parser:

  1. Go to the tc/compiler/parse directory.

  2. To run the parser so that the stream of tokens is dumped to stdout:

     bash tokens.sh <file.t

  3. To run the parser so that the parse tree is dumped to stdout:

     bash tree.sh <file.t

  4. To run the parser so that the parse tree is displayed in a separate
     window:

     bash gui.sh <file.t

  5. When done debugging, do "make clean" before rebuilding the system for
     normal execution.

